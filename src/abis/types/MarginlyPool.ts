/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export type MarginlyParamsStruct = {
  maxLeverage: BigNumberish;
  priceSecondsAgo: BigNumberish;
  priceSecondsAgoMC: BigNumberish;
  interestRate: BigNumberish;
  fee: BigNumberish;
  swapFee: BigNumberish;
  mcSlippage: BigNumberish;
  positionMinAmount: BigNumberish;
  quoteLimit: BigNumberish;
};

export type MarginlyParamsStructOutput = [
  number,
  number,
  number,
  number,
  number,
  number,
  number,
  BigNumber,
  BigNumber
] & {
  maxLeverage: number;
  priceSecondsAgo: number;
  priceSecondsAgoMC: number;
  interestRate: number;
  fee: number;
  swapFee: number;
  mcSlippage: number;
  positionMinAmount: BigNumber;
  quoteLimit: BigNumber;
};

export declare namespace FP96 {
  export type FixedPointStruct = { inner: BigNumberish };

  export type FixedPointStructOutput = [BigNumber] & { inner: BigNumber };
}

export declare namespace MaxBinaryHeapLib {
  export type NodeStruct = { key: BigNumberish; account: string };

  export type NodeStructOutput = [BigNumber, string] & {
    key: BigNumber;
    account: string;
  };
}

export interface MarginlyPoolInterface extends utils.Interface {
  functions: {
    "baseCollateralCoeff()": FunctionFragment;
    "baseDebtCoeff()": FunctionFragment;
    "baseDelevCoeff()": FunctionFragment;
    "baseToken()": FunctionFragment;
    "discountedBaseCollateral()": FunctionFragment;
    "discountedBaseDebt()": FunctionFragment;
    "discountedQuoteCollateral()": FunctionFragment;
    "discountedQuoteDebt()": FunctionFragment;
    "emergencyWithdrawCoeff()": FunctionFragment;
    "execute(uint8,uint256,uint256,uint256,bool,address,uint256)": FunctionFragment;
    "factory()": FunctionFragment;
    "getBasePrice()": FunctionFragment;
    "getHeapPosition(uint32,bool)": FunctionFragment;
    "getLiquidationPrice()": FunctionFragment;
    "initialPrice()": FunctionFragment;
    "initialize(address,address,bool,address,(uint8,uint16,uint16,uint24,uint24,uint24,uint24,uint184,uint184))": FunctionFragment;
    "lastReinitTimestampSeconds()": FunctionFragment;
    "mode()": FunctionFragment;
    "params()": FunctionFragment;
    "positions(address)": FunctionFragment;
    "quoteCollateralCoeff()": FunctionFragment;
    "quoteDebtCoeff()": FunctionFragment;
    "quoteDelevCoeff()": FunctionFragment;
    "quoteToken()": FunctionFragment;
    "setParameters((uint8,uint16,uint16,uint24,uint24,uint24,uint24,uint184,uint184))": FunctionFragment;
    "shutDown(uint256)": FunctionFragment;
    "sweepETH()": FunctionFragment;
    "systemLeverage()": FunctionFragment;
    "uniswapPool()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "baseCollateralCoeff"
      | "baseDebtCoeff"
      | "baseDelevCoeff"
      | "baseToken"
      | "discountedBaseCollateral"
      | "discountedBaseDebt"
      | "discountedQuoteCollateral"
      | "discountedQuoteDebt"
      | "emergencyWithdrawCoeff"
      | "execute"
      | "factory"
      | "getBasePrice"
      | "getHeapPosition"
      | "getLiquidationPrice"
      | "initialPrice"
      | "initialize"
      | "lastReinitTimestampSeconds"
      | "mode"
      | "params"
      | "positions"
      | "quoteCollateralCoeff"
      | "quoteDebtCoeff"
      | "quoteDelevCoeff"
      | "quoteToken"
      | "setParameters"
      | "shutDown"
      | "sweepETH"
      | "systemLeverage"
      | "uniswapPool"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "baseCollateralCoeff",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "baseDebtCoeff",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "baseDelevCoeff",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "baseToken", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "discountedBaseCollateral",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "discountedBaseDebt",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "discountedQuoteCollateral",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "discountedQuoteDebt",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "emergencyWithdrawCoeff",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "execute",
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      boolean,
      string,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(functionFragment: "factory", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getBasePrice",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getHeapPosition",
    values: [BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "getLiquidationPrice",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "initialPrice",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [string, string, boolean, string, MarginlyParamsStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "lastReinitTimestampSeconds",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "mode", values?: undefined): string;
  encodeFunctionData(functionFragment: "params", values?: undefined): string;
  encodeFunctionData(functionFragment: "positions", values: [string]): string;
  encodeFunctionData(
    functionFragment: "quoteCollateralCoeff",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "quoteDebtCoeff",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "quoteDelevCoeff",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "quoteToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setParameters",
    values: [MarginlyParamsStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "shutDown",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "sweepETH", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "systemLeverage",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "uniswapPool",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "baseCollateralCoeff",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "baseDebtCoeff",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "baseDelevCoeff",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "baseToken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "discountedBaseCollateral",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "discountedBaseDebt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "discountedQuoteCollateral",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "discountedQuoteDebt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "emergencyWithdrawCoeff",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "execute", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "factory", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getBasePrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getHeapPosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLiquidationPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "initialPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "lastReinitTimestampSeconds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "mode", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "params", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "positions", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "quoteCollateralCoeff",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "quoteDebtCoeff",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "quoteDelevCoeff",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "quoteToken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setParameters",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "shutDown", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "sweepETH", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "systemLeverage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "uniswapPool",
    data: BytesLike
  ): Result;

  events: {
    "BalanceSync()": EventFragment;
    "ClosePosition(address,address,uint256,uint256,uint256)": EventFragment;
    "Deleverage(uint8,uint256,uint256)": EventFragment;
    "DepositBase(address,uint256,uint8,uint256)": EventFragment;
    "DepositQuote(address,uint256,uint8,uint256)": EventFragment;
    "Emergency(uint8)": EventFragment;
    "EmergencyWithdraw(address,address,uint256)": EventFragment;
    "EnactMarginCall(address,uint256)": EventFragment;
    "Long(address,uint256,uint256,uint256,uint256)": EventFragment;
    "ParametersChanged()": EventFragment;
    "ReceivePosition(address,address,uint8,uint256,uint256)": EventFragment;
    "Reinit(uint256)": EventFragment;
    "Short(address,uint256,uint256,uint256,uint256)": EventFragment;
    "WithdrawBase(address,uint256,uint256)": EventFragment;
    "WithdrawQuote(address,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "BalanceSync"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ClosePosition"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Deleverage"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DepositBase"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DepositQuote"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Emergency"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "EmergencyWithdraw"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "EnactMarginCall"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Long"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ParametersChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ReceivePosition"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Reinit"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Short"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WithdrawBase"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WithdrawQuote"): EventFragment;
}

export interface BalanceSyncEventObject {}
export type BalanceSyncEvent = TypedEvent<[], BalanceSyncEventObject>;

export type BalanceSyncEventFilter = TypedEventFilter<BalanceSyncEvent>;

export interface ClosePositionEventObject {
  user: string;
  token: string;
  collateralDelta: BigNumber;
  swapPriceX96: BigNumber;
  collateralDiscountedDelta: BigNumber;
}
export type ClosePositionEvent = TypedEvent<
  [string, string, BigNumber, BigNumber, BigNumber],
  ClosePositionEventObject
>;

export type ClosePositionEventFilter = TypedEventFilter<ClosePositionEvent>;

export interface DeleverageEventObject {
  positionType: number;
  totalCollateralReduced: BigNumber;
  totalDebtReduced: BigNumber;
}
export type DeleverageEvent = TypedEvent<
  [number, BigNumber, BigNumber],
  DeleverageEventObject
>;

export type DeleverageEventFilter = TypedEventFilter<DeleverageEvent>;

export interface DepositBaseEventObject {
  user: string;
  amount: BigNumber;
  newPositionType: number;
  baseDiscountedAmount: BigNumber;
}
export type DepositBaseEvent = TypedEvent<
  [string, BigNumber, number, BigNumber],
  DepositBaseEventObject
>;

export type DepositBaseEventFilter = TypedEventFilter<DepositBaseEvent>;

export interface DepositQuoteEventObject {
  user: string;
  amount: BigNumber;
  newPositionType: number;
  quoteDiscountedAmount: BigNumber;
}
export type DepositQuoteEvent = TypedEvent<
  [string, BigNumber, number, BigNumber],
  DepositQuoteEventObject
>;

export type DepositQuoteEventFilter = TypedEventFilter<DepositQuoteEvent>;

export interface EmergencyEventObject {
  mode: number;
}
export type EmergencyEvent = TypedEvent<[number], EmergencyEventObject>;

export type EmergencyEventFilter = TypedEventFilter<EmergencyEvent>;

export interface EmergencyWithdrawEventObject {
  who: string;
  token: string;
  amount: BigNumber;
}
export type EmergencyWithdrawEvent = TypedEvent<
  [string, string, BigNumber],
  EmergencyWithdrawEventObject
>;

export type EmergencyWithdrawEventFilter =
  TypedEventFilter<EmergencyWithdrawEvent>;

export interface EnactMarginCallEventObject {
  user: string;
  swapPriceX96: BigNumber;
}
export type EnactMarginCallEvent = TypedEvent<
  [string, BigNumber],
  EnactMarginCallEventObject
>;

export type EnactMarginCallEventFilter = TypedEventFilter<EnactMarginCallEvent>;

export interface LongEventObject {
  user: string;
  amount: BigNumber;
  swapPriceX96: BigNumber;
  quoteDiscountedDelta: BigNumber;
  baseDiscountedDelta: BigNumber;
}
export type LongEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber, BigNumber],
  LongEventObject
>;

export type LongEventFilter = TypedEventFilter<LongEvent>;

export interface ParametersChangedEventObject {}
export type ParametersChangedEvent = TypedEvent<
  [],
  ParametersChangedEventObject
>;

export type ParametersChangedEventFilter =
  TypedEventFilter<ParametersChangedEvent>;

export interface ReceivePositionEventObject {
  liquidator: string;
  position: string;
  newPositionType: number;
  newPositionQuoteDiscounted: BigNumber;
  newPositionBaseDiscounted: BigNumber;
}
export type ReceivePositionEvent = TypedEvent<
  [string, string, number, BigNumber, BigNumber],
  ReceivePositionEventObject
>;

export type ReceivePositionEventFilter = TypedEventFilter<ReceivePositionEvent>;

export interface ReinitEventObject {
  reinitTimestamp: BigNumber;
}
export type ReinitEvent = TypedEvent<[BigNumber], ReinitEventObject>;

export type ReinitEventFilter = TypedEventFilter<ReinitEvent>;

export interface ShortEventObject {
  user: string;
  amount: BigNumber;
  swapPriceX96: BigNumber;
  quoteDiscountedDelta: BigNumber;
  baseDiscountedDelta: BigNumber;
}
export type ShortEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber, BigNumber],
  ShortEventObject
>;

export type ShortEventFilter = TypedEventFilter<ShortEvent>;

export interface WithdrawBaseEventObject {
  user: string;
  amount: BigNumber;
  baseDiscountedDelta: BigNumber;
}
export type WithdrawBaseEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  WithdrawBaseEventObject
>;

export type WithdrawBaseEventFilter = TypedEventFilter<WithdrawBaseEvent>;

export interface WithdrawQuoteEventObject {
  user: string;
  amount: BigNumber;
  quoteDiscountedDelta: BigNumber;
}
export type WithdrawQuoteEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  WithdrawQuoteEventObject
>;

export type WithdrawQuoteEventFilter = TypedEventFilter<WithdrawQuoteEvent>;

export interface MarginlyPool extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: MarginlyPoolInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    baseCollateralCoeff(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { inner: BigNumber }>;

    baseDebtCoeff(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { inner: BigNumber }>;

    baseDelevCoeff(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { inner: BigNumber }>;

    baseToken(overrides?: CallOverrides): Promise<[string]>;

    discountedBaseCollateral(overrides?: CallOverrides): Promise<[BigNumber]>;

    discountedBaseDebt(overrides?: CallOverrides): Promise<[BigNumber]>;

    discountedQuoteCollateral(overrides?: CallOverrides): Promise<[BigNumber]>;

    discountedQuoteDebt(overrides?: CallOverrides): Promise<[BigNumber]>;

    emergencyWithdrawCoeff(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { inner: BigNumber }>;

    execute(
      call: BigNumberish,
      amount1: BigNumberish,
      amount2: BigNumberish,
      limitPriceX96: BigNumberish,
      flag: boolean,
      receivePositionAddress: string,
      swapCalldata: BigNumberish,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<ContractTransaction>;

    factory(overrides?: CallOverrides): Promise<[string]>;

    getBasePrice(
      overrides?: CallOverrides
    ): Promise<[FP96.FixedPointStructOutput]>;

    getHeapPosition(
      index: BigNumberish,
      _short: boolean,
      overrides?: CallOverrides
    ): Promise<
      [boolean, MaxBinaryHeapLib.NodeStructOutput] & { success: boolean }
    >;

    getLiquidationPrice(
      overrides?: CallOverrides
    ): Promise<[FP96.FixedPointStructOutput]>;

    initialPrice(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { inner: BigNumber }>;

    initialize(
      _quoteToken: string,
      _baseToken: string,
      _quoteTokenIsToken0: boolean,
      _uniswapPool: string,
      _params: MarginlyParamsStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    lastReinitTimestampSeconds(overrides?: CallOverrides): Promise<[BigNumber]>;

    mode(overrides?: CallOverrides): Promise<[number]>;

    params(
      overrides?: CallOverrides
    ): Promise<
      [
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        BigNumber,
        BigNumber
      ] & {
        maxLeverage: number;
        priceSecondsAgo: number;
        priceSecondsAgoMC: number;
        interestRate: number;
        fee: number;
        swapFee: number;
        mcSlippage: number;
        positionMinAmount: BigNumber;
        quoteLimit: BigNumber;
      }
    >;

    positions(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [number, number, BigNumber, BigNumber] & {
        _type: number;
        heapPosition: number;
        discountedBaseAmount: BigNumber;
        discountedQuoteAmount: BigNumber;
      }
    >;

    quoteCollateralCoeff(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { inner: BigNumber }>;

    quoteDebtCoeff(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { inner: BigNumber }>;

    quoteDelevCoeff(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { inner: BigNumber }>;

    quoteToken(overrides?: CallOverrides): Promise<[string]>;

    setParameters(
      _params: MarginlyParamsStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    shutDown(
      swapCalldata: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    sweepETH(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    systemLeverage(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { shortX96: BigNumber; longX96: BigNumber }
    >;

    uniswapPool(overrides?: CallOverrides): Promise<[string]>;
  };

  baseCollateralCoeff(overrides?: CallOverrides): Promise<BigNumber>;

  baseDebtCoeff(overrides?: CallOverrides): Promise<BigNumber>;

  baseDelevCoeff(overrides?: CallOverrides): Promise<BigNumber>;

  baseToken(overrides?: CallOverrides): Promise<string>;

  discountedBaseCollateral(overrides?: CallOverrides): Promise<BigNumber>;

  discountedBaseDebt(overrides?: CallOverrides): Promise<BigNumber>;

  discountedQuoteCollateral(overrides?: CallOverrides): Promise<BigNumber>;

  discountedQuoteDebt(overrides?: CallOverrides): Promise<BigNumber>;

  emergencyWithdrawCoeff(overrides?: CallOverrides): Promise<BigNumber>;

  execute(
    call: BigNumberish,
    amount1: BigNumberish,
    amount2: BigNumberish,
    limitPriceX96: BigNumberish,
    flag: boolean,
    receivePositionAddress: string,
    swapCalldata: BigNumberish,
    overrides?: PayableOverrides & { from?: string }
  ): Promise<ContractTransaction>;

  factory(overrides?: CallOverrides): Promise<string>;

  getBasePrice(overrides?: CallOverrides): Promise<FP96.FixedPointStructOutput>;

  getHeapPosition(
    index: BigNumberish,
    _short: boolean,
    overrides?: CallOverrides
  ): Promise<
    [boolean, MaxBinaryHeapLib.NodeStructOutput] & { success: boolean }
  >;

  getLiquidationPrice(
    overrides?: CallOverrides
  ): Promise<FP96.FixedPointStructOutput>;

  initialPrice(overrides?: CallOverrides): Promise<BigNumber>;

  initialize(
    _quoteToken: string,
    _baseToken: string,
    _quoteTokenIsToken0: boolean,
    _uniswapPool: string,
    _params: MarginlyParamsStruct,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  lastReinitTimestampSeconds(overrides?: CallOverrides): Promise<BigNumber>;

  mode(overrides?: CallOverrides): Promise<number>;

  params(
    overrides?: CallOverrides
  ): Promise<
    [
      number,
      number,
      number,
      number,
      number,
      number,
      number,
      BigNumber,
      BigNumber
    ] & {
      maxLeverage: number;
      priceSecondsAgo: number;
      priceSecondsAgoMC: number;
      interestRate: number;
      fee: number;
      swapFee: number;
      mcSlippage: number;
      positionMinAmount: BigNumber;
      quoteLimit: BigNumber;
    }
  >;

  positions(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<
    [number, number, BigNumber, BigNumber] & {
      _type: number;
      heapPosition: number;
      discountedBaseAmount: BigNumber;
      discountedQuoteAmount: BigNumber;
    }
  >;

  quoteCollateralCoeff(overrides?: CallOverrides): Promise<BigNumber>;

  quoteDebtCoeff(overrides?: CallOverrides): Promise<BigNumber>;

  quoteDelevCoeff(overrides?: CallOverrides): Promise<BigNumber>;

  quoteToken(overrides?: CallOverrides): Promise<string>;

  setParameters(
    _params: MarginlyParamsStruct,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  shutDown(
    swapCalldata: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  sweepETH(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  systemLeverage(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & { shortX96: BigNumber; longX96: BigNumber }
  >;

  uniswapPool(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    baseCollateralCoeff(overrides?: CallOverrides): Promise<BigNumber>;

    baseDebtCoeff(overrides?: CallOverrides): Promise<BigNumber>;

    baseDelevCoeff(overrides?: CallOverrides): Promise<BigNumber>;

    baseToken(overrides?: CallOverrides): Promise<string>;

    discountedBaseCollateral(overrides?: CallOverrides): Promise<BigNumber>;

    discountedBaseDebt(overrides?: CallOverrides): Promise<BigNumber>;

    discountedQuoteCollateral(overrides?: CallOverrides): Promise<BigNumber>;

    discountedQuoteDebt(overrides?: CallOverrides): Promise<BigNumber>;

    emergencyWithdrawCoeff(overrides?: CallOverrides): Promise<BigNumber>;

    execute(
      call: BigNumberish,
      amount1: BigNumberish,
      amount2: BigNumberish,
      limitPriceX96: BigNumberish,
      flag: boolean,
      receivePositionAddress: string,
      swapCalldata: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    factory(overrides?: CallOverrides): Promise<string>;

    getBasePrice(
      overrides?: CallOverrides
    ): Promise<FP96.FixedPointStructOutput>;

    getHeapPosition(
      index: BigNumberish,
      _short: boolean,
      overrides?: CallOverrides
    ): Promise<
      [boolean, MaxBinaryHeapLib.NodeStructOutput] & { success: boolean }
    >;

    getLiquidationPrice(
      overrides?: CallOverrides
    ): Promise<FP96.FixedPointStructOutput>;

    initialPrice(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      _quoteToken: string,
      _baseToken: string,
      _quoteTokenIsToken0: boolean,
      _uniswapPool: string,
      _params: MarginlyParamsStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    lastReinitTimestampSeconds(overrides?: CallOverrides): Promise<BigNumber>;

    mode(overrides?: CallOverrides): Promise<number>;

    params(
      overrides?: CallOverrides
    ): Promise<
      [
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        BigNumber,
        BigNumber
      ] & {
        maxLeverage: number;
        priceSecondsAgo: number;
        priceSecondsAgoMC: number;
        interestRate: number;
        fee: number;
        swapFee: number;
        mcSlippage: number;
        positionMinAmount: BigNumber;
        quoteLimit: BigNumber;
      }
    >;

    positions(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [number, number, BigNumber, BigNumber] & {
        _type: number;
        heapPosition: number;
        discountedBaseAmount: BigNumber;
        discountedQuoteAmount: BigNumber;
      }
    >;

    quoteCollateralCoeff(overrides?: CallOverrides): Promise<BigNumber>;

    quoteDebtCoeff(overrides?: CallOverrides): Promise<BigNumber>;

    quoteDelevCoeff(overrides?: CallOverrides): Promise<BigNumber>;

    quoteToken(overrides?: CallOverrides): Promise<string>;

    setParameters(
      _params: MarginlyParamsStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    shutDown(
      swapCalldata: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    sweepETH(overrides?: CallOverrides): Promise<void>;

    systemLeverage(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { shortX96: BigNumber; longX96: BigNumber }
    >;

    uniswapPool(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "BalanceSync()"(): BalanceSyncEventFilter;
    BalanceSync(): BalanceSyncEventFilter;

    "ClosePosition(address,address,uint256,uint256,uint256)"(
      user?: string | null,
      token?: string | null,
      collateralDelta?: null,
      swapPriceX96?: null,
      collateralDiscountedDelta?: null
    ): ClosePositionEventFilter;
    ClosePosition(
      user?: string | null,
      token?: string | null,
      collateralDelta?: null,
      swapPriceX96?: null,
      collateralDiscountedDelta?: null
    ): ClosePositionEventFilter;

    "Deleverage(uint8,uint256,uint256)"(
      positionType?: null,
      totalCollateralReduced?: null,
      totalDebtReduced?: null
    ): DeleverageEventFilter;
    Deleverage(
      positionType?: null,
      totalCollateralReduced?: null,
      totalDebtReduced?: null
    ): DeleverageEventFilter;

    "DepositBase(address,uint256,uint8,uint256)"(
      user?: string | null,
      amount?: null,
      newPositionType?: null,
      baseDiscountedAmount?: null
    ): DepositBaseEventFilter;
    DepositBase(
      user?: string | null,
      amount?: null,
      newPositionType?: null,
      baseDiscountedAmount?: null
    ): DepositBaseEventFilter;

    "DepositQuote(address,uint256,uint8,uint256)"(
      user?: string | null,
      amount?: null,
      newPositionType?: null,
      quoteDiscountedAmount?: null
    ): DepositQuoteEventFilter;
    DepositQuote(
      user?: string | null,
      amount?: null,
      newPositionType?: null,
      quoteDiscountedAmount?: null
    ): DepositQuoteEventFilter;

    "Emergency(uint8)"(mode?: null): EmergencyEventFilter;
    Emergency(mode?: null): EmergencyEventFilter;

    "EmergencyWithdraw(address,address,uint256)"(
      who?: string | null,
      token?: string | null,
      amount?: null
    ): EmergencyWithdrawEventFilter;
    EmergencyWithdraw(
      who?: string | null,
      token?: string | null,
      amount?: null
    ): EmergencyWithdrawEventFilter;

    "EnactMarginCall(address,uint256)"(
      user?: string | null,
      swapPriceX96?: null
    ): EnactMarginCallEventFilter;
    EnactMarginCall(
      user?: string | null,
      swapPriceX96?: null
    ): EnactMarginCallEventFilter;

    "Long(address,uint256,uint256,uint256,uint256)"(
      user?: string | null,
      amount?: null,
      swapPriceX96?: null,
      quoteDiscountedDelta?: null,
      baseDiscountedDelta?: null
    ): LongEventFilter;
    Long(
      user?: string | null,
      amount?: null,
      swapPriceX96?: null,
      quoteDiscountedDelta?: null,
      baseDiscountedDelta?: null
    ): LongEventFilter;

    "ParametersChanged()"(): ParametersChangedEventFilter;
    ParametersChanged(): ParametersChangedEventFilter;

    "ReceivePosition(address,address,uint8,uint256,uint256)"(
      liquidator?: string | null,
      position?: string | null,
      newPositionType?: null,
      newPositionQuoteDiscounted?: null,
      newPositionBaseDiscounted?: null
    ): ReceivePositionEventFilter;
    ReceivePosition(
      liquidator?: string | null,
      position?: string | null,
      newPositionType?: null,
      newPositionQuoteDiscounted?: null,
      newPositionBaseDiscounted?: null
    ): ReceivePositionEventFilter;

    "Reinit(uint256)"(reinitTimestamp?: null): ReinitEventFilter;
    Reinit(reinitTimestamp?: null): ReinitEventFilter;

    "Short(address,uint256,uint256,uint256,uint256)"(
      user?: string | null,
      amount?: null,
      swapPriceX96?: null,
      quoteDiscountedDelta?: null,
      baseDiscountedDelta?: null
    ): ShortEventFilter;
    Short(
      user?: string | null,
      amount?: null,
      swapPriceX96?: null,
      quoteDiscountedDelta?: null,
      baseDiscountedDelta?: null
    ): ShortEventFilter;

    "WithdrawBase(address,uint256,uint256)"(
      user?: string | null,
      amount?: null,
      baseDiscountedDelta?: null
    ): WithdrawBaseEventFilter;
    WithdrawBase(
      user?: string | null,
      amount?: null,
      baseDiscountedDelta?: null
    ): WithdrawBaseEventFilter;

    "WithdrawQuote(address,uint256,uint256)"(
      user?: string | null,
      amount?: null,
      quoteDiscountedDelta?: null
    ): WithdrawQuoteEventFilter;
    WithdrawQuote(
      user?: string | null,
      amount?: null,
      quoteDiscountedDelta?: null
    ): WithdrawQuoteEventFilter;
  };

  estimateGas: {
    baseCollateralCoeff(overrides?: CallOverrides): Promise<BigNumber>;

    baseDebtCoeff(overrides?: CallOverrides): Promise<BigNumber>;

    baseDelevCoeff(overrides?: CallOverrides): Promise<BigNumber>;

    baseToken(overrides?: CallOverrides): Promise<BigNumber>;

    discountedBaseCollateral(overrides?: CallOverrides): Promise<BigNumber>;

    discountedBaseDebt(overrides?: CallOverrides): Promise<BigNumber>;

    discountedQuoteCollateral(overrides?: CallOverrides): Promise<BigNumber>;

    discountedQuoteDebt(overrides?: CallOverrides): Promise<BigNumber>;

    emergencyWithdrawCoeff(overrides?: CallOverrides): Promise<BigNumber>;

    execute(
      call: BigNumberish,
      amount1: BigNumberish,
      amount2: BigNumberish,
      limitPriceX96: BigNumberish,
      flag: boolean,
      receivePositionAddress: string,
      swapCalldata: BigNumberish,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<BigNumber>;

    factory(overrides?: CallOverrides): Promise<BigNumber>;

    getBasePrice(overrides?: CallOverrides): Promise<BigNumber>;

    getHeapPosition(
      index: BigNumberish,
      _short: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getLiquidationPrice(overrides?: CallOverrides): Promise<BigNumber>;

    initialPrice(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      _quoteToken: string,
      _baseToken: string,
      _quoteTokenIsToken0: boolean,
      _uniswapPool: string,
      _params: MarginlyParamsStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    lastReinitTimestampSeconds(overrides?: CallOverrides): Promise<BigNumber>;

    mode(overrides?: CallOverrides): Promise<BigNumber>;

    params(overrides?: CallOverrides): Promise<BigNumber>;

    positions(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    quoteCollateralCoeff(overrides?: CallOverrides): Promise<BigNumber>;

    quoteDebtCoeff(overrides?: CallOverrides): Promise<BigNumber>;

    quoteDelevCoeff(overrides?: CallOverrides): Promise<BigNumber>;

    quoteToken(overrides?: CallOverrides): Promise<BigNumber>;

    setParameters(
      _params: MarginlyParamsStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    shutDown(
      swapCalldata: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    sweepETH(overrides?: Overrides & { from?: string }): Promise<BigNumber>;

    systemLeverage(overrides?: CallOverrides): Promise<BigNumber>;

    uniswapPool(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    baseCollateralCoeff(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    baseDebtCoeff(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    baseDelevCoeff(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    baseToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    discountedBaseCollateral(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    discountedBaseDebt(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    discountedQuoteCollateral(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    discountedQuoteDebt(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    emergencyWithdrawCoeff(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    execute(
      call: BigNumberish,
      amount1: BigNumberish,
      amount2: BigNumberish,
      limitPriceX96: BigNumberish,
      flag: boolean,
      receivePositionAddress: string,
      swapCalldata: BigNumberish,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    factory(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getBasePrice(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getHeapPosition(
      index: BigNumberish,
      _short: boolean,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getLiquidationPrice(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialPrice(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    initialize(
      _quoteToken: string,
      _baseToken: string,
      _quoteTokenIsToken0: boolean,
      _uniswapPool: string,
      _params: MarginlyParamsStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    lastReinitTimestampSeconds(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    mode(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    params(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    positions(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    quoteCollateralCoeff(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    quoteDebtCoeff(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    quoteDelevCoeff(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    quoteToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setParameters(
      _params: MarginlyParamsStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    shutDown(
      swapCalldata: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    sweepETH(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    systemLeverage(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    uniswapPool(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
